#+TITLE: Continuous Delivery
#+DESCRIPTION: with Maven, Jenkins, Docker, Puppet, Shipyard and MCollective
#+AUTHOR: Jose San Leandro
#+EMAIL: codemotion@acm-sl.org
#+DATE: 2014-11-22
#+LANGUAJE: en
#+KEYWORDS: continuous-delivery, maven, jenkins, docker, puppect, shipyard, mcollective
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME:
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: codemotion-madrid2014
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)
     
* Continuous Delivery

** Continuous Delivery

*** 						      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :END:
\includegraphics[height=200px]{book.jpg}

*** Continuous Delivery - Jez Humble and David Farley	      :B_block:BMCOL:  
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:

    \textit{``Encouraging greater collaboration between everyone involved in software delivery in order to release valuable software faster and more reliably.''}


** Pipeline

*** 							    :B_ignoreheading:
    :PROPERTIES:
    :END:
\includegraphics[height=180px,width=305px]{continuous-delivery-pipeline.png}


** Automation

*** Automation 						      :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- Speed up the release of new features
- Special focus on risk: automate everything!
- Advance towards Continuous Deployment
- No need for code freeze
- Automated tagging

* Maven

** Maven

*** Maven quote 					      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: 
    :BEAMER_col: 0.6
    :END:

\textit{``Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting and documentation from a central piece of information.''}

*** Maven logo 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
\includegraphics[width=100]{maven.png}

\small{http://apache.maven.org}

** Modularization

*** Convention 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.6
    :END:

- All logic is isolated in its own module.
- No multi-module projects, unless for WARs.
- All modules inherit from a common, logic-less module: the parent POM.

*** graph 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
\includegraphics[width=100]{graph.jpg}


** How

*** Parent POM 						      :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- Declares all dependencies in one place.
- Ensures all modules use the same versions of the dependencies.
- Defines common configurations for maven plugins.
- Simplifies child poms.
- Uses Maven properties to specify the versions of in-house modules.

** Versioning

*** Parent POM 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.4
    :END:

- All in-house modules, share the same version: latest-SNAPSHOT
- All local environments get always up-to-date code.
- Versions are resolved when generating releases.

*** version 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :END:
\includegraphics[width=200]{version.png}


* Jenkins

** What

#  # -- \usebackgroundtemplate{\includegraphics[width=\paperwidth]{book.jpg}}
*** Jenkins 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: 
    :BEAMER_col: 0.6
    :END:

\textit{``An extendable open source continuous integration server.''}

*** Jenkins 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
\includegraphics[width=100]{jenkins.png}

http://jenkins-ci.org

** \textit{get-new-version}

*** \textit{get-new-version} job (1) 				    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- Helper job to automate the tagging and packaging process.
- Checks out parent-pom code.
- Parameterized job with a single parameter: the name of the module triggering the release.
- Should have higher priority to avoid slot starvation and deadlocks in Jenkins.
- Expects parent-pom to contain two properties: version.major and version.minor.

** \textit{get-new-version}

*** \textit{get-new-version} job (2) 				    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- When a commit is pushed to the remote repository, Jenkins launches the associated job.
- The job is a Maven job, which runs \texttt{mvn deploy}.
- If it succeeds, calls \texttt{get-new-version} with its own name as parameter.

** \textit{get-new-version}

*** \textit{get-new-version} job (3) 				    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- Parses the parent pom and defines a new version using a convention: $V = major.minor.BUILD\_NUMBER$ (provided by Jenkins).
- Using \textbf{maven-versions-plugin}:
  * Updates its own version to the new version $V$.
  * Updates all version properties, from latest-SNAPSHOT, to the latest released version (by asking the remote repository).
  * Updates the version for the triggering module to be $V$.
- Builds a release the Maven way, with \textbf{maven-release-plugin}.
- Publishes the new pom, with references to the latest released versions of each module.

** \textit{get-new-version}

*** \textit{get-new-version} job (4) 				    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- The trigger module, using \textbf{maven-versions-plugin} again, updates its own pom to point to the newly released parent pom.
- Accordingly, uses \textbf{maven-release-plugin} to build all required artifacts and tag the new version: $V$.
- For each commit, (at least) two artifacts are generated: parent-pom-$V$ and module-$V$.

** \textit{get-new-version}

*** \textit{get-new-version} job (5) 				    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- Maven jobs in Jenkins run Maven Embedded engine.
- Maven annotates parent jobs as dependencies in the dependency graph.
- For \textit{get-new-version} to work, it cannot be a Maven job: It has to call Maven from the command line.
- Otherwise, it triggers an infinite loop of downstream jobs.

* Docker

** Docker

*** Docker 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: 
    :BEAMER_col: 0.6
    :END:

\textit{``An open platform for distributed applications for developers and sysadmins.''}

*** Docker 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
\includegraphics[width=100]{docker-whale-home-logo.png}

http://www.docker.com

** Docker

*** Docker 							    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

``The Docker Engine container comprises just the application and its dependencies. It runs as an isolated process in userspace on the host operating system, sharing the kernel with other containers. Thus, it enjoys the resource isolation and allocation benefits of VMs but is much more portable and efficient.''

** Docker Concepts

*** Docker Concepts (1) 					    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- \textbf{Image}: Packaged application and dependencies. Ready to launch.
- \textbf{Container}: An isolated (process, memory, network, etc.) environment, running an \textit{image}.
- \textbf{Volume}: A folder within a container, accessible from the host. Can be directly mapped to a folder in the host.

** Docker Concepts

*** Docker Concepts (2) 					    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- \textbf{Link}: Docker mechanism to help containers communicate with each other. It's defined as \texttt{--link container:alias}:
  - \textit{container}: the name of the external, already running container,
  - \textit{alias}: the name used locally in the new container, pointing to the external container. Docker adds it to /etc/hosts, and defines some environment properties.
- \textbf{Exposed port}: Docker service can map host ports to internal ports, when the container starts.

** phusion-baseimage

*** phusion-baseimage 						    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- A minimal Ubuntu base image modified for Docker-friendliness.
- Takes care of the problem of:
  - Zombie processes,
  - Logger daemon,
  - Cron jobs.
- Motivation explained in their website: ``Your Docker image might be broken without you knowing it''
https://phusion.github.io/baseimage-docker/

** Dockerfile templates

*** Dockerfile templates 					    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- Based on wking's approach and code for Gentoo-based images:
 https://github.com/wking/dockerfile
- Modified for phusion-baseimage.
- Enhanced with in-house bash scripting framework: dry-wit.
- Allows placeholders in Dockerfiles.

* Shipyard

** Shipyard

*** \textit{Composable Docker Management} 		      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: 
    :BEAMER_col: 0.6
    :END:

\textit{``Built on the Docker cluster management toolkit Citadel, Shipyard gives you the ability to manage Docker resources including containers, hosts and more.}

\textit{Shipyard differs from other management applications in that it promotes composability. At the core, Shipyard only manages Docker (containers, etc). However, using "Extension Images" you can add functionality such as application routing and load balancing, centralized logging, deployment and more.''}

*** Shipyard 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
\includegraphics[width=100]{shipyard-logo.png}

\small{http://shipyard-project.com}

** Citadel

*** Citadel 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: 
    :BEAMER_col: 0.6
    :END:

\textit{``Citadel is a toolkit for scheduling containers on a Docker cluster.''}

*** Shipyard 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
\includegraphics[width=100]{citadel-logo.png}

\small{http://citadeltoolkit.org}

* Puppet 

** Puppet

*** Puppet 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: 
    :BEAMER_col: 0.6
    :END:

\textit{``Puppet manages your servers: you describe machine configurations in an easy-to-read declarative language, and Puppet will bring your systems into the desired state and keep them there.''}

*** Puppet 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
\includegraphics[width=100]{puppet-logo.png}

\small{http://www.puppetlabs.com}

** Puppet on guests

*** Pros 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

- Images can be deployed anywhere.
- It doesn't require a convention to map host volumes or data containers.
- Containers can respond to changes propagated via Puppet.

*** Cons 					      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

- Containers take much longer to start.
- Automatic generation, auto-sign, and auto-accept SSL certificates.
- Puppet infrastructure required in production. 

** Puppet on hosts 
 
*** Pros 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

- Containers are staless.
- Containers launch fast.

*** Cons 					      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

- Containers need to be prepared to read their configuration from plain files.
- The command for launching containers depends on Puppet configuration for that host.
- Puppet infrastructure required in production. 
 
** Puppet to build data-container images
 
*** Pros 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

- Puppet sets up the configuration for environment-aware images.
- No Puppet needed in production: just links to data containers.
- Launching containers do not depend on the host.

*** Cons 					      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

- SSL certificate magic takes place on intermediate Docker images.
- A change in Puppet requires rebuilding the images, replacing the data-containers, and probably the application containers as well.

** Puppet to manage data-container images
 
*** Pros 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

- Data containers launch the Puppet agent: their configuration can evolve over time.
- Puppet sets up the configuration depending on the environment.
- Launching containers do not depend on the host.

*** Cons 					      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

- Puppet infrastructure needed in production.
- SSL certificate magic takes place on data containers.

* MCollective

** MCollective

*** MCollective 					      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: 
    :BEAMER_col: 0.6
    :END:

\textit{``MCollective is a powerful orchestration framework.}

\textit{Run actions on thousands of servers simultaneously, using existing plugins or writing your own.''}

*** MCollective 				      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:

\includegraphics[width=100]{mcollective-logo.png}

\small{http://www.puppetlabs.com}


** ssh in a loop (1)
 
*** Pros 						      :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- Simple and straightforward
- Fast enough up to a certain number of hosts
- Easy and cheap to adapt to perform different tasks
- Scriptable

** ssh in a loop (2)

*** Cons 					      :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- Scripts with hard-coded host names or IPs
- Requires way too much information about the production environment
- Cannot easily run remote commands which expect some kind of interaction
- When the number of host grow, the risk of overlook reported problems increases
- Requires dealing with account permissions, SSO, etc.

** MCollective
 
*** Pros 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

- Scales with the number of hosts in production
- Extendable via plugins
- Doesn't require system accounts, SSO on production hosts
- Puppet module available for servers

*** Cons 					      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:

- More complex architecture
- Requires middleware
- Scaling beyond certain size requires tuning
- Middleware should be fault-tolerant
- Misconfigured setups can generate excessive traffic

** Architecture

