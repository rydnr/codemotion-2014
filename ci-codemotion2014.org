#+TITLE: Continuous Delivery
#+DESCRIPTION: with Maven, Jenkins, Docker, Puppet, Shipyard and MCollective
#+AUTHOR: Jose San Leandro
#+EMAIL: codemotion@acm-sl.org
#+DATE: 2014-11-22
#+LANGUAJE: en
#+KEYWORDS: continuous-delivery, maven, jenkins, docker, puppect, shipyard, mcollective
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME:
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: codemotion-madrid2014
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)
     
* Continuous Delivery

** What

*** 						      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :END:
\includegraphics[height=200px]{book.jpg}

*** Continuous Delivery - Jez Humble and David Farley	      :B_block:BMCOL:  
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:

    \textit{``Encouraging greater collaboration between everyone involved in software delivery in order to release valuable software faster and more reliably.''}


** Pipeline

*** 							    :B_ignoreheading:
    :PROPERTIES:
    :END:
\includegraphics[height=180px,width=305px]{continuous-delivery-pipeline.png}


** Why

** How
     
* Maven

** Maven

*** Maven quote 					      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: 
    :BEAMER_col: 0.6
    :END:

\textit{``Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting and documentation from a central piece of information.''}
http://apache.maven.org


*** Maven logo 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
\includegraphics[width=100]{maven.png}


** Modularization

*** Convention 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.6
    :END:

- All logic is isolated in its own module.
- No multi-module projects, unless for WARs.
- All modules inherit from a common, logic-less module: the parent POM.

*** graph 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
\includegraphics[width=100]{graph.jpg}


** How

*** Parent POM 						      :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

- Declares all dependencies in one place.
- Ensures all modules use the same versions of the dependencies.
- Defines common configurations for maven plugins.
- Simplifies child poms.
- Uses Maven properties to specify the versions of in-house modules.

** Versioning

*** Parent POM 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.4
    :END:

- All in-house modules, share the same version: latest-SNAPSHOT
- All local environments get always up-to-date code.
- Versions are resolved when generating releases.

*** version 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.6
    :END:
\includegraphics[width=200]{version.png}


* Jenkins

** What

#  # -- \usebackgroundtemplate{\includegraphics[width=\paperwidth]{book.jpg}}
*** Jenkins 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: 
    :BEAMER_col: 0.6
    :END:

\textit{``An extendable open source continuous integration server.''}

http://jenkins-ci.org

*** Jenkins 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
\includegraphics[width=100]{jenkins.png}

** How

* Docker

** What

*** Docker 						      :BMCOL:B_block:
    :PROPERTIES:
    :BEAMER_env: 
    :BEAMER_col: 0.6
    :END:

\textit{``An open platform for distributed applications for developers and sysadmins.''}

http://www.docker.com

*** Docker 					      :BMCOL:B_ignoreheading:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
\includegraphics[width=100]{docker-whale-home-logo.png}


** Why

** How

* Shipyard

** What

** Why

** How

** Docker GUI

** Citadel

* Puppet 

** What

** Why

** How

* MCollective

** What

** Why

** How

** Architecture

